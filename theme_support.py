"""
theme_support.py

Модуль для поддержки тем оформления в приложении.

Этот модуль предоставляет функциональность для управления темами оформления, 
включая возможность переключения между темами и получение информации о доступных темах.

Классы:
    ThemeManager: Класс для управления темами оформления.
"""

class ThemeManager:
    """
    Класс для управления темами оформления.

    Этот класс позволяет загружать, переключать и получать информацию о доступных темах оформления.

    Атрибуты:
        themes (dict): Словарь, содержащий доступные темы оформления.
        current_theme (str): Название текущей активной темы оформления.

    Методы:
        load_theme(theme_name): Загружает и применяет указанную тему оформления.
        switch_theme(theme_name): Переключает на указанную тему оформления.
        get_current_theme(): Возвращает название текущей активной темы оформления.
        list_themes(): Возвращает список доступных тем оформления.
    """

    def __init__(self):
        """
        Инициализирует ThemeManager и загружает доступные темы оформления.

        При создании экземпляра ThemeManager автоматически загружаются доступные темы.
        """
        self.themes = {
            'light': {'background': '#FFFFFF', 'text': '#000000'},
            'dark': {'background': '#000000', 'text': '#FFFFFF'},
            'blue': {'background': '#ADD8E6', 'text': '#000000'},
        }
        self.current_theme = 'light'  # Устанавливаем тему по умолчанию

    def load_theme(self, theme_name):
        """
        Загружает и применяет указанную тему оформления.

        :param theme_name: Название темы оформления, которую нужно загрузить.
        :raises ValueError: Если указанное название темы не существует.
        """
        if theme_name not in self.themes:
            raise ValueError(f"Тема '{theme_name}' не найдена.")
        self.current_theme = theme_name
        # Здесь можно добавить код для применения стилей темы в приложении
        print(f"Тема '{theme_name}' загружена и применена.")

    def switch_theme(self, theme_name):
        """
        Переключает на указанную тему оформления.

        :param theme_name: Название темы оформления, на которую нужно переключиться.
        """
        self.load_theme(theme_name)

    def get_current_theme(self):
        """
        Возвращает название текущей активной темы оформления.

        :return: Название текущей темы оформления.
        """
        return self.current_theme

    def list_themes(self):
        """
        Возвращает список доступных тем оформления.

        :return: Список названий доступных тем.
        """
        return list(self.themes.keys())
